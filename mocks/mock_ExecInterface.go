// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	dwmstatusbar "github.com/mhersson/dwmstatusbar/internal/dwmstatusbar"
	mock "github.com/stretchr/testify/mock"
)

// MockExecInterface is an autogenerated mock type for the ExecInterface type
type MockExecInterface struct {
	mock.Mock
}

type MockExecInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecInterface) EXPECT() *MockExecInterface_Expecter {
	return &MockExecInterface_Expecter{mock: &_m.Mock}
}

// NewCommand provides a mock function with given fields: command, args
func (_m *MockExecInterface) NewCommand(command string, args ...string) dwmstatusbar.CmdInterface {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, command)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 dwmstatusbar.CmdInterface
	if rf, ok := ret.Get(0).(func(string, ...string) dwmstatusbar.CmdInterface); ok {
		r0 = rf(command, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dwmstatusbar.CmdInterface)
		}
	}

	return r0
}

// MockExecInterface_NewCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewCommand'
type MockExecInterface_NewCommand_Call struct {
	*mock.Call
}

// NewCommand is a helper method to define mock.On call
//   - command string
//   - args ...string
func (_e *MockExecInterface_Expecter) NewCommand(command interface{}, args ...interface{}) *MockExecInterface_NewCommand_Call {
	return &MockExecInterface_NewCommand_Call{Call: _e.mock.On("NewCommand",
		append([]interface{}{command}, args...)...)}
}

func (_c *MockExecInterface_NewCommand_Call) Run(run func(command string, args ...string)) *MockExecInterface_NewCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockExecInterface_NewCommand_Call) Return(_a0 dwmstatusbar.CmdInterface) *MockExecInterface_NewCommand_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecInterface_NewCommand_Call) RunAndReturn(run func(string, ...string) dwmstatusbar.CmdInterface) *MockExecInterface_NewCommand_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExecInterface creates a new instance of MockExecInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecInterface {
	mock := &MockExecInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
